#!/bin/bash

current_date_time=$(date)
rc_file=$1
tag_name=$2
publickey=$3
required_dev_servers=3

echo "$current_date_time Starting deployment of $tag_name using $rc_file for credentials."
source $rc_file

# Define variables
network_name="${tag_name}_network"
subnet_name="${tag_name}_subnet"
keypair_name="${tag_name}_key"
router_name="${tag_name}_router"
security_group_name="${tag_name}_security_group"
haproxy_server="${tag_name}_HAproxy"
haproxy_server2="${tag_name}_HAproxy2"
bastion_server="${tag_name}_bastion"
dev_server="${tag_name}_dev"
vip_port="${tag_name}_vip" # virtual IP port
sshconfig="config"
knownhosts="known_hosts"
hostsfile="hosts"

# Cleanup old files if they exist
for file in "$sshconfig" "$knownhosts" "$hostsfile"; do
    [[ -f $file ]] && rm "$file"
done

# Check and create keypair
checking_keypair=$(openstack keypair list -f value --column Name)
if ! grep -qFx "$keypair_name" <<< "$checking_keypair"; then
    keypair_create=$(openstack keypair create --public-key "$publickey" "$keypair_name")
    echo "$(date) keypair created $keypair_name"
else
    echo "$(date) $keypair_name already exists"
fi

# Check and create network
existing_networks=$(openstack network list --tag "$tag_name" --column Name -f value)
if echo "$existing_networks" | grep -qFx "$network_name"; then
    echo "$(date) $network_name already exists"
else
    created_network=$(openstack network create --tag "$tag_name" "$network_name" -f json)
    echo "$(date) Created network $network_name"
fi

# Check and create subnet
checking_subnets=$(openstack subnet list -f value --column Name)
if ! grep -qFx "$subnet_name" <<< "$checking_subnets"; then
    subnet_create=$(openstack subnet create --tag "$tag_name" --network "$network_name" --subnet-range 10.50.0.0/24 --gateway 10.50.0.1 --allocation-pool start=10.50.0.2,end=10.50.0.100 "$subnet_name" -f json)
    echo "$(date) subnet created $subnet_name"
else
    echo "$(date) $subnet_name already exists"
fi

# Check and create router
checking_routers=$(openstack router list -f value --column Name)
if ! grep -qFx "$router_name" <<< "$checking_routers"; then
    router_create=$(openstack router create --tag "$tag_name" "$router_name")
    echo "$(date) router created $router_name"
    # Add subnet and external gateway to the router
    gatewaysetting=$(openstack router set --external-gateway ext-net "$router_name")
    subnetadding=$(openstack router add subnet "$router_name" "$subnet_name")
else
    echo "$(date) $router_name already exists"
fi

# Check and create security group
existing_secgrps=$(openstack security group list -f value --column Name)
if echo "$existing_secgrps" | grep -qFx "$security_group_name"; then
    echo "$(date) $security_group_name already exists"
else
    secgrp_create=$(openstack security group create --tag "$tag_name" "$security_group_name" -f json)
    
    rules=(
        "--remote-ip 0.0.0.0/0 --dst-port 22 --protocol tcp --ingress"
        "--remote-ip 0.0.0.0/0 --dst-port 80 --protocol icmp --ingress"
        "--remote-ip 0.0.0.0/0 --dst-port 5000 --protocol tcp --ingress"
        "--remote-ip 0.0.0.0/0 --dst-port 8080 --protocol tcp --ingress"
        "--remote-ip 0.0.0.0/0 --dst-port 6000 --protocol udp --ingress"
        "--remote-ip 0.0.0.0/0 --dst-port 9090 --protocol tcp --ingress"
        "--remote-ip 0.0.0.0/0 --dst-port 9100 --protocol tcp --ingress"
        "--remote-ip 0.0.0.0/0 --dst-port 3000 --protocol tcp --ingress"
        "--remote-ip 0.0.0.0/0 --dst-port 161 --protocol udp --ingress"
        "--protocol 112"
    )

    for rule in "${rules[@]}"; do
        openstack security group rule create $rule "$security_group_name"
    done

    echo "$(date) security group $security_group_name has been created with the specified rules"
fi

# Create port for Virtual IP
echo "$(date) creating virtual port"
vip=$(openstack port create --network "$network_name" --fixed-ip subnet="$subnet_name" --no-security-group "$vip_port")

unassigned_ips=$(openstack floating ip list --status DOWN -f value -c "Floating IP Address")

# Create bastion server
existing_servers=$(openstack server list --status ACTIVE --column Name -f value)
if echo "$existing_servers" | grep -qFx "$bastion_server"; then
    echo "$(date) $bastion_server already exists"
else
    if [[ -n "$unassigned_ips" ]]; then
        fip1=$(echo "$unassigned_ips" | awk 'NR==1')
        echo "$(date) Assigned floating IP $fip1 for bastion server"
    else
        echo "$(date) Creating floating ip for bastion"
        created_fip1=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address')
        fip1="$created_fip1"
    fi
    bastion=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" "$bastion_server" --key-name "$keypair_name" --flavor "1C-2GB-50GB" --network "$network_name" --security-group "$security_group_name")
    add_bastion_fip=$(openstack server add floating ip "$bastion_server" "$fip1")
    echo "$(date) created $bastion_server server"
fi

# Create HAproxy servers
if echo "$existing_servers" | grep -qFx "$haproxy_server"; then
    echo "$(date) $haproxy_server already exists"
else
    if [[ -n "$unassigned_ips" ]]; then
        fip2=$(echo "$unassigned_ips" | awk 'NR==2')
        echo "$(date) Assigned floating IP $fip2 for HAproxy server"
    else
        fip2=$(openstack floating ip create ext-net -f json | jq -r '.floating_ip_address')
        echo "$(date) Created floating IP $fip2 for HAproxy server"
    fi
    openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" "$haproxy_server" --key-name "$keypair_name" --flavor "1C-2GB-50GB" --network "$network_name" --security-group "$security_group_name"
    openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" "$haproxy_server2" --key-name "$keypair_name" --flavor "1C-2GB-50GB" --network "$network_name" --security-group "$security_group_name"
    echo "$(date) Created $haproxy_server and $haproxy_server2 servers"
fi

# Attach floating IP to VIP port
add_vip_fip=$(openstack floating ip set --port "$vip_port" "$fip2")

vip_addr=$(openstack port show "$vip_port" -f value -c fixed_ips | grep -Po '\d+\.\d+\.\d+\.\d+')
echo "$vip_addr" >> vipaddr

# Update VIP port with FP pair
update_port=$(openstack port set --allowed-address ip-address="$fip2" "$vip_port" > /dev/null)

# Manage dev servers
number_dev_servers=$(grep -ocP "${dev_server}" <<<"$existing_servers")

if ((required_dev_servers < number_dev_servers)); then
    dev_server_takeout=$((number_dev_servers - required_dev_servers))
    for ((i = 0; i < dev_server_takeout; i++)); do
        devserver_remove=$(openstack server list --status ACTIVE -f value -c Name | grep -m1 -oP "${tag_name}_dev([1-9]+)")
        removed_server=$(openstack server delete "$devserver_remove" --wait)
        echo "$(date) Deleted $devserver_remove"
    done
elif ((required_dev_servers > number_dev_servers)); then
    devserver_plus=$((required_dev_servers - number_dev_servers))
    j=$((number_dev_servers + 1))

    for ((i = 0; i < devserver_plus; i++)); do
        namedev_server="${dev_server}${j}"
        dser_create=$(openstack server create --image "Ubuntu 20.04 Focal Fossa x86_64" "$namedev_server" --key-name "$keypair_name" --flavor "1C-1GB-50GB" --network "$network_name" --security-group "$security_group_name")
        echo "$(date) Created $namedev_server server"

        active=false
        until $active; do
            server_status=$(openstack server show "$namedev_server" -f value -c status)
            if [[ "$server_status" == "ACTIVE" ]]; then
                active=true
            fi
        done

        ((j++))
    done
else
    echo "Required number of dev servers ($required_dev_servers) already exists."
fi

# Get floating IPs
bastionfip=$(openstack server list --name "$bastion_server" -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==2')
haproxyfip=$(openstack server show "$haproxy_server" -c addresses -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')
haproxyfip2=$(openstack server list --name "$haproxy_server2" -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+' | awk 'NR==1')

# Update ports of HAproxy servers
portid_ha1=$(openstack port list --fixed-ip ip-address="$haproxyfip" -c ID -f value)
portid_ha2=$(openstack port list --fixed-ip ip-address="$haproxyfip2" -c ID -f value)

update_port1=$(openstack port set --allowed-address ip-address="$vip_addr" "$portid_ha1")
update_port2=$(openstack port set --allowed-address ip-address="$vip_addr" "$portid_ha2")

# Generate SSH config file
echo "$(date) Generating config file"
cat <<EOL >> $sshconfig
Host $bastion_server
    User ubuntu
    HostName $bastionfip
    IdentityFile ~/.ssh/id_rsa
    UserKnownHostsFile /dev/null
    StrictHostKeyChecking no
    PasswordAuthentication no

Host $haproxy_server
    User ubuntu
    HostName $haproxyfip
    IdentityFile ~/.ssh/id_rsa
    StrictHostKeyChecking no
    PasswordAuthentication no
    ProxyJump $bastion_server

Host $haproxy_server2
    User ubuntu
    HostName $haproxyfip2
    IdentityFile ~/.ssh/id_rsa
    StrictHostKeyChecking no
    PasswordAuthentication no
    ProxyJump $bastion_server
EOL

# Generate hosts file
echo "[bastion]" >> $hostsfile
echo "$bastion_server" >> $hostsfile
echo " " >> $hostsfile
echo "[HAproxy]" >> $hostsfile
echo "$haproxy_server" >> $hostsfile
echo "$haproxy_server2" >> $hostsfile
echo " " >> $hostsfile
echo "[webservers]" >> $hostsfile

# Get the list of active servers
active_servers=$(openstack server list --status ACTIVE -f value -c Name | grep -oP "${tag_name}_dev[1-9]+")
# Loop through each active server and extract its IP address
for server in $active_servers; do
    ip_address=$(openstack server list --name $server -c Networks -f value | grep -Po '\d+\.\d+\.\d+\.\d+')
    cat <<EOL >> $sshconfig

Host $server
    User ubuntu
    HostName $ip_address
    IdentityFile ~/.ssh/id_rsa
    UserKnownHostsFile /dev/null
    StrictHostKeyChecking no
    PasswordAuthentication no
    ProxyJump $bastion_server
EOL

    echo "$server" >> $hostsfile
done

cat <<EOL >> $hostsfile
[primary_proxy]
$haproxy_server

[backup_proxy]
$haproxy_server2

[all:vars]
ansible_user=ubuntu
ansible_ssh_private_key_file=~/.ssh/id_rsa
ansible_ssh_common_args='-F $sshconfig'
EOL

echo "$(date) Running ansible playbook"
ansible-playbook -i "$hostsfile" site.yaml

echo "$(date) Bastion IP address: $fip1"
echo "$(date) HAproxy IP address: $fip2"

